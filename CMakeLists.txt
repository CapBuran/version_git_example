message(STATUS "CMAKE_VERSION='${CMAKE_VERSION}'")
message(STATUS "CMAKE_GENERATOR='${CMAKE_GENERATOR}'")

cmake_minimum_required(VERSION 3.1.0)

project (NSD CXX)

if(DEFINED COMMON_HINT)
  set(COMPONENTS_DIR ${COMMON_HINT})
elseif (NOT DEFINED COMPONENTS_DIR)
  if (DEFINED ENV{COMPONENTS_DIR} )
    set(COMPONENTS_DIR $ENV{COMPONENTS_DIR} )
  else()
    set(COMPONENTS_DIR "${CMAKE_SOURCE_DIR}/../common")
  endif()
endif()

message(STATUS "Components dir = ${COMPONENTS_DIR}")

if(NOT DEFINED MASS_HINT)
  set(CMAKE_CXX_STANDARD 17)
  set(CMAKE_CXX_STANDARD_REQUIRED ON)

  if(UNIX)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --std=c++17") 
  else()
    set(CMAKE_C_FLAGS_DEBUG "/MD /MP /Zi /Ob0 /Od /RTC1")
    set(CMAKE_C_FLAGS_MINSIZEREL "/MD /MP /O1 /Ob1 /DNDEBUG")
    set(CMAKE_C_FLAGS_RELEASE "/MD /MP /O2 /Ob2 /DNDEBUG")
    set(CMAKE_C_FLAGS_RELWITHDEBINFO "/MD /MP /Zi /O2 /Ob1 /DNDEBUG")
    set(CMAKE_CXX_FLAGS_DEBUG "/MD /MP /W3 /Zi /Ob0 /Od /RTC1")
    set(CMAKE_CXX_FLAGS_MINSIZEREL "/MD /MP /W3 /O1 /Ob1 /DNDEBUG")
    set(CMAKE_CXX_FLAGS_RELEASE "/MD /MP /W3 /O2 /Ob2 /DNDEBUG")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "/MD /MP /W3 /Zi /O2 /Ob1 /DNDEBUG")
  endif()

  set(CMAKE_MODULE_PATH ${COMPONENTS_DIR}/cmake/modules)
  set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMake")

  if(NOT DEFINED 3RD)
    if(EXISTS "${CMAKE_SOURCE_DIR}/third_party/installed")
      set(3RD "${CMAKE_SOURCE_DIR}/third_party/installed")
    elseif(EXISTS "${CMAKE_SOURCE_DIR}/../../third_party/installed")
      set(3RD "${CMAKE_SOURCE_DIR}/../../third_party/installed")
    endif()
  endif(NOT DEFINED 3RD)

  if (NOT DEFINED Log4cplus_ROOT)
    set(Log4cplus_ROOT "${3RD}/log4cplus")
  endif()
  find_package(Log4cplus REQUIRED)

  set(BOOST_ROOT "${3RD}/boost")
  set(BOOST_LIBRARYDIR "${3RD}/boost")
  set(Boost_USE_STATIC_LIBS ON)
  set(Boost_USE_MULTITHREADED ON)
  set(Boost_USE_RELEASE_LIBS ON)
  find_package(Boost 1.67 REQUIRED COMPONENTS atomic chrono date_time filesystem program_options regex serialization system thread timer)
  add_definitions(-D__STDC_FORMAT_MACROS -DBOOST_ALL_NO_LIB -DBOOST_MPL_CFG_NO_PREPROCESSED_HEADERS -DBOOST_MPL_LIMIT_LIST_SIZE=50)

  if(NOT GTest_FOUND)
    set (GTEST_ROOT "${3RD}/gtest")
    find_package(GTest CONFIG REQUIRED PATHS "${3RD}/gtest")
  endif()
else()
  add_subdirectory(${COMPONENTS_DIR}/libs/asn1 common/asn1)
endif()

set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMake")

if(NOT DEFINED MASS_HINT)
  add_subdirectory(${COMPONENTS_DIR}/libs/logger common/logger)
  add_subdirectory(${COMPONENTS_DIR}/libs/masking_layout common/masking_layout)
  add_subdirectory(${COMPONENTS_DIR}/libs/basefunc basefunc/basefunc)
  add_subdirectory(${COMPONENTS_DIR}/libs/concurrency_queue common/concurrency_queue)
  add_subdirectory(${COMPONENTS_DIR}/libs/asn1 common/asn1)
  add_subdirectory(${COMPONENTS_DIR}/libs/enum_flags common/enum_flags)
  add_subdirectory(${COMPONENTS_DIR}/libs/ip_address common/ip_address)
  add_subdirectory(${COMPONENTS_DIR}/libs/config_parser common/config_parser)
  add_subdirectory(${COMPONENTS_DIR}/libs/tcpclient common/tcpclient)
  add_subdirectory(${COMPONENTS_DIR}/libs/nw common/nw)
  add_subdirectory(${COMPONENTS_DIR}/libs/udpclient common/udpclient)
  add_subdirectory(${COMPONENTS_DIR}/libs/demon_wrapper_systemd common/demon_wrapper_systemd)
else()
  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${COMPONENTS_DIR}/cmake/modules)
  include(CMakeRC)
endif()

include(EnsureVersionInformation)
include(EnsureOutputPath)

file(GLOB LIB_NSD_INC "./include/*.h")
file(GLOB LIB_NSD_SRC "./libSrc/*.cpp")

file(GLOB LIB_NSD_IMPL_INC "./privateInclude/*.h")
list(APPEND LIB_NSD_INC ${LIB_NSD_IMPL_INC})

if(UNIX)
  file(GLOB LIB_NSD_UNIX_INC "./privateInclude/unix/*.h")
  file(GLOB LIB_NSD_UNIX_SRC "./libSrc/*.cpp" "./libSrc/unix/*.cpp")
  list(APPEND LIB_NSD_INC ${LIB_NSD_UNIX_INC})
  list(APPEND LIB_NSD_SRC ${LIB_NSD_UNIX_SRC})
endif()

source_group ("Impl" FILES ${LIB_NSD_IMPL_INC})

add_library(${PROJECT_NAME} STATIC ${LIB_NSD_INC} ${LIB_NSD_SRC} )

if(UNIX)
  target_include_directories(${PROJECT_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/privateInclude/unix")
endif(UNIX)

target_include_directories(${PROJECT_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/include")
target_include_directories(${PROJECT_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/privateInclude")
target_include_directories(${PROJECT_NAME} PRIVATE ${Boost_INCLUDE_DIRS})

if(WIN32)
  target_link_libraries(${PROJECT_NAME} PRIVATE mswsock secur32 ws2_32)
else()
  target_link_libraries(${PROJECT_NAME} PRIVATE stdc++fs pthread)
endif()

target_link_libraries(${PROJECT_NAME} PRIVATE ${Boost_LIBRARIES})
target_link_libraries(${PROJECT_NAME} PRIVATE Common::asn1)
target_link_libraries(${PROJECT_NAME} PRIVATE Common::nw)
target_link_libraries(${PROJECT_NAME} PRIVATE Common::tcpclient)

add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/sender)
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/tests)